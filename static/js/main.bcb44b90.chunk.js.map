{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["pluralize","require","App","useState","input","setInput","result","setResult","stop_words","setStopWords","idfs","setIDFS","doc_vectors","setDocVectors","get_magnitude","vector","i","magnitude","length","Math","sqrt","get_vector","doc_id","Object","keys","map","key","handleClick","word","query_vector","query","toLowerCase","split","filter","includes","replace","singular","e","query_tfidf","m_query","scores","doc_list","m_doc","dot_product","inter_result","push","join","useEffect","fetch","headers","then","response","json","myJson","Grid","container","spacing","alignItems","justify","style","margin","Typography","variant","textAlign","color","marginTop","height","width","backgroundColor","item","xs","TextField","id","label","fullWidth","onChange","target","value","onKeyPress","Button","onClick","size","startIcon","fontWeight","Card","CardContent","overflowWrap","fontSize","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bcb44b90.chunk.js","sourcesContent":["import React , { useEffect, useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport FindInPage from '@material-ui/icons/FindInPage';\nimport Search from '@material-ui/icons/Search'\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent'\nimport 'fontsource-roboto';\nvar pluralize = require('pluralize')\n\n\nfunction App() {\n  let [input, setInput] = useState(\"\");\n  let [result, setResult] = useState(\"NaN\");\n  let [stop_words, setStopWords] = useState([]);\n  let [idfs, setIDFS] = useState([]);\n  let [doc_vectors, setDocVectors] = useState([])\n\n  const getData = () => {\n    fetch('vsm.json'\n    ,{\n      headers : { \n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n       }\n    }\n    )\n      .then(function(response){\n        return response.json();\n      })\n      .then(function(myJson) {\n        setDocVectors(myJson)\n      });\n  }\n\n  const getIDFS = () => {\n    fetch('idfs.json'\n    ,{\n      headers : { \n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n       }\n    }\n    )\n      .then(function(response){\n        return response.json();\n      })\n      .then(function(myJson) {\n        setIDFS(myJson)\n      });\n  }\n\n  const getStopWords = () => {\n    fetch('stopwords.json'\n    ,{\n      headers : { \n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n       }\n    }\n    )\n      .then(function(response){\n        return response.json();\n      })\n      .then(function(myJson) {\n        setStopWords(myJson)\n      });\n  }\n\n  function handleInput(e){\n    setInput(e.target.value);\n  }\n\n  function get_magnitude(vector){\n    let i;\n    let magnitude = 0;\n    for(i = 0; i < vector.length; i++){\n      magnitude += vector[i]*vector[i];\n    }\n\n    magnitude = Math.sqrt(magnitude);\n    return magnitude;\n  }\n\n  function get_vector(doc_id){\n    let vector = doc_vectors[doc_id];\n    var values = Object.keys(vector).map(function(key){\n      return vector[key];\n    });\n    return values;\n  }\n\n  function handleClick(){\n    let i, doc_id, word;\n    let query_vector = {};\n    /* lemmentize input similar to word list */\n    let query = input.toLowerCase().split(\" \");\n    // remove stop words \n    query = query.filter((word) => !stop_words[\"words\"].includes(word));\n    for(i in query){\n      query[i] = query[i].replace(/[.,'—’‘ªã©¯\\/#!@?$%\\^&\\*;:(){}=\\-_`~]/g,\"\");\n      query[i] = query[i].replace(/\\s{2,}/g,\" \");\n      query[i] = pluralize.singular(query[i])\n      query[i] = query[i].replace(/ly$/g,\"\");\n      query[i] = query[i].replace(/ed$/g,\"\");\n      query[i] = query[i].replace(/ness$/g,\"\");\n    }\n    //remove empty spaces\n    query = query.filter(e => e != \"\")\n    \n    for(word of query){\n      query_vector[word] = 0;\n    }\n    for(word of query){\n      query_vector[word] += 1;\n    }\n    let query_tfidf = {};\n    for(word of query){\n      query_tfidf[word] = query_vector[word] * idfs[word]\n    }\n    var values = Object.keys(query_tfidf).map(function(key){\n      return query_tfidf[key];\n    });\n    \n    let m_query = get_magnitude(values);\n    let scores = {};\n    for(doc_id = 1; doc_id < 51; doc_id++){\n      let doc_list = doc_vectors[doc_id];\n      let m_doc = get_magnitude(get_vector(doc_id));\n      let dot_product = 0;\n      for(word in query_tfidf){\n        dot_product += query_tfidf[word] * doc_list[word];\n      }\n      scores[doc_id] = dot_product / (m_query * m_doc);\n    }\n    let inter_result = [];\n    for(i = 1; i < 51; i++){\n      if(scores[i] >= 0.001){\n        inter_result.push(i);\n      }\n    }\n\n    if(inter_result.length == 0) setResult(\"No Documents Available, Please Rephrase Query\")\n    else{\n      result = inter_result.join(\" , \");\n      setResult(result);\n    }  \n      \n  }\n\n  useEffect(() => {\n    getData();\n    getIDFS();\n    getStopWords();\n  }, [])\n\n  return (\n    <div>\n      <Grid container spacing={3} alignItems=\"center\" justify=\"center\" style={{margin:\"auto\"}}>\n        <Typography variant=\"h3\" style={{textAlign:\"center\" , color:\"#3f51b5\" , marginTop: \"20%\" }} >Vector Space Model</Typography>\n        <div style={{ marginTop:10 ,height:\"1px\" , width:\"100%\", backgroundColor:\"gray\"}}>\n        </div>\n        <Grid item xs={12} >\n        </Grid>\n        <Grid item xs={12} >\n        </Grid>\n        <Grid item  >\n          <FindInPage/>\n        </Grid>\n        <Grid item alignItems=\"center\" justify=\"center\" xs={8}>\n          <TextField id=\"search-field\" label=\"Enter Query\" fullWidth=\"true\" onChange={handleInput} onKeyPress={(e) => { if(e.key === 'Enter') handleClick()}} />\n        </Grid>\n        <Grid item xs={12} >\n        </Grid>\n        <Button\n        onClick={handleClick}\n        variant=\"contained\"\n        color=\"primary\"\n        size=\"medium\"\n        startIcon={<Search />}>\n        Search\n        </Button>\n        <div style={{ marginTop:20 , height:\"1px\" , width:\"100%\", backgroundColor:\"gray\"}}>\n        </div>\n\n        <Grid item xs={11} style={{marginTop:15}}>\n          <Typography variant=\"button\" style={{color:\"#3f51b5\", fontWeight:\"bold\"}}>Result Set:</Typography>\n          <Card variant=\"outlined\" style={{backgroundColor:\"#e0e0e6\"}}>\n            <CardContent style={{overflowWrap:\"break-word\"}}>\n              <Typography variant=\"button\" style={{fontSize:\"18px\"}} >{result}</Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}